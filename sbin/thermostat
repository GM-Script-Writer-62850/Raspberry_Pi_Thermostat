#!/usr/bin/python
import RPi.GPIO as GPIO
import time
import datetime
import json
import os
import subprocess
import sys
import signal
import sqlite3

nLight=12 # Night Light
relayA=11 # Top Relay
relayB=13 # Bottom Relay
tubeA=15 # Top Tube
tubeB=16 # Bottom Tube
delay=2 # Loop Delay
logInt=5 # Munites between datas collection while running, use 0 for none (Approximate)

# sqlite Logging feature is not 100% complete, undecided on full implementation
#  it lacks a GUI for viewing records and does not log weather at this time.
#  It may be scraped in-favor of a plain text log or redesigned completely

try:
	#log=sqlite3.connect('/var/www/html/thermostat.sqlite3') 
	log=None
	logInt=logInt*60/delay # number of delays between logs
except sqlite3.Error as e:
	print e
if log is not None:
	dbc=log.cursor()
	dbc.executescript(
		"CREATE TABLE IF NOT EXISTS copy ("
			"time  INTEGER PRIMARY KEY,"
			"r1    INTEGER NOT NULL,"
			"r2    INTEGER NOT NULL,"
			"temp  INTEGER NOT NULL"
		");"
		"CREATE TABLE IF NOT EXISTS heat ("
			"time  INTEGER PRIMARY KEY,"
			"r1    INTEGER NOT NULL,"
			"r2    INTEGER NOT NULL,"
			"temp  INTEGER NOT NULL"
		");"
		"CREATE TABLE IF NOT EXISTS cool ("
			"time  INTEGER PRIMARY KEY,"
			"r1    INTEGER NOT NULL,"
			"temp  INTEGER NOT NULL"
		");"
		"CREATE TABLE IF NOT EXISTS weather ("
			"time  INTEGER PRIMARY KEY," # weather.current_observation.observation_epoch
			"temp  INTEGER NOT NULL," # weather.current_observation.temp_c
			"wind  FLOAT NOT NULL," # weather.current_observation.wind_kph
			"wdeg  INTEGER NOT NULL," # weather.current_observation.wind_degrees
			"dewp  INTEGER NOT NULL" # weather.current_observation.dewpoint_c
		");"
		
	)

GPIO.setmode(GPIO.BOARD)
for i in [relayA, relayB, nLight]:
	GPIO.setup(i, GPIO.OUT)
	GPIO.output(i, 0)
for i in [tubeA, tubeB]:
	GPIO.setup(i, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
err="/var/www/html/tmp/crash"

def readJSON(s):
	try:
		with open("/var/www/html/"+s,'r') as cfg:
			cfg=json.load(cfg)
	except:
		time.sleep(0.005)
		s=readJSON(s)
	return cfg
def readTemp():
	s="/sys/devices/w1_bus_master1/28-011453d75eff/w1_slave"
	if not os.path.isfile(s):
		return False
	with open(s, 'r') as f:
		lines=f.readlines()
	return lines
def getTemp(last=None,cycled=0):
	lines=readTemp()
	if lines is False:
		return False
	ct=0
	while lines[0].strip()[-3:] != 'YES': # Wait what, lets try that again
		ct=ct+1
		time.sleep(0.3)
		lines=readTemp()
		if ct > 5 or lines is False: # Guess we are not going to get one any time soon
			return False
	equals_pos = lines[1].find('t=')
	if equals_pos != -1:
		temp = {"temp":int(lines[1][equals_pos+2:]),"tube1":GPIO.input(tubeA),"tube2":GPIO.input(tubeB),"relay1":GPIO.input(relayA),"relay2":GPIO.input(relayB),"cycled":cycled}
		if last!=None:
#			print last
#			print temp["temp"]
#			print abs(last-temp["temp"])
			if abs(last-temp["temp"]) > 1000:
#				print "I call bull shit"
				time.sleep(0.25)
				return getTemp(temp["temp"]) # I call bull shit
		with open('/var/www/html/tmp/temp.json', 'w+') as f:
			json.dump(temp,f)
		return temp["temp"]
	return False
def getOffset(sun,cfg):
	now=int(time.time())
	rise=sun["rise"]["stamp"]+cfg["sunrise"]*60
	set=sun["set"]["stamp"]+cfg["sunset"]*60
	if now > rise and now < set:
		GPIO.output(nLight, 1)
		return cfg["day"]
	GPIO.output(nLight, 0)
	return cfg["night"]
def getTarget(cfg,offset,temp):
	t=cfg["target"]+offset
	with open('/var/www/html/tmp/lcd.json', 'w+') as f:
		json.dump({"format":cfg["format"],"on":t,"off":t+cfg["trigger"],"temp":temp,"enable":cfg["enabled"]},f)
#		f.write('{'
#			'"format":"'+cfg["format"]+'",'
#			'"on":'+str(t)+','
#			'"off":'+str(t+cfg["trigger"])+','
#			'"temp":'+str(temp)+','
#			'"enable":'+str(cfg["enabled"])+
#		'}')
	return t+cfg["trigger"]
def copyTubes(set):
	if GPIO.input(tubeA) != GPIO.input(relayA) or GPIO.input(tubeB) != GPIO.input(relayB):
		GPIO.output(relayA, GPIO.input(tubeA))
		GPIO.output(relayA, GPIO.input(tubeB))
		appendLog(0)
	if not set:
		GPIO.output(nLight, not GPIO.input(nLight))
#		print "ERROR"
	return getTemp()
def config2C(cfg):
	# Output is C*1000 to match sensor input (better that way to avoid decimals)
	cfg["target"]=cfg["target"]+getCronOffset()
	if cfg["format"] == "F":
		cfg["target"]=int(round((cfg["target"]-32)*5.0/9.0*1000,0))
		cfg["trigger"]=int(round(cfg["trigger"]*5.0/9.0*1000,0))
		cfg["auxon"]=int(round(cfg["auxon"]*5.0/9.0*1000,0)*-1)
		cfg["auxoff"]=int(round(cfg["auxoff"]*5.0/9.0*1000,0))
		cfg["day"]=int(round(cfg["day"]*5.0/9.0*1000,0))
		cfg["night"]=int(round(cfg["night"]*5.0/9.0*1000,0))
	else:
		cfg["target"]=cfg["target"]*1000
		if cfg["format"] == "K":
			cfg["target"]=cfg["target"]-273150
		cfg["trigger"]=cfg["trigger"]*1000
		cfg["auxon"]=cfg["auxon"]*1000*-1
		cfg["auxoff"]=cfg["auxoff"]*1000
		cfg["day"]=cfg["day"]*1000
		cfg["night"]=cfg["night"]*1000
	return cfg
def getCronOffset():
	evts=readJSON("cron.json")
	today=int(datetime.date.today().strftime("%w"))
	time=int(datetime.datetime.now().strftime("%H"))*60+int(datetime.datetime.now().strftime("%M"))
	evtOffset=0
	for evt in evts:
		if(evt["enable"]):
			if today in evt["days"]:
				start=evt["time"]["start"]["h"]*60+evt["time"]["start"]["m"]
				end=evt["time"]["end"]["h"]*60+evt["time"]["end"]["m"]
				if time >= start and time <= end:
					evtOffset=evtOffset+evt["offset"]
	return evtOffset
def appendLog(state):
	# We do not need to worry about a sql injeciton attack as we know the data is safe
	if log is None:
		return 0
	if state == 1:
		table="cool"
		dbc.execute(
			"INSERT INTO cool(time,r1,temp)"
			"VALUES("+str(time.time())+","+str(GPIO.input(relayA))+","+str(temp)+")"
		)
	else:
		if state == 2:
			table="heat"
		else:
			table="copy"
		dbc.execute(
			"INSERT INTO "+table+"(time,r1,r2,temp)"
			"VALUES("+str(time.time())+","+str(GPIO.input(relayA))+","+str(GPIO.input(relayB))+","+str(temp)+")"
		)
	limit=10000 # Effective max size will be limit*2-1, once this limit is reached the table will have a min size of limit
	if dbc.lastrowid % limit == 0:
		dbc.execute("DELETE FROM "+table+" WHERE id < "+str(int(dbc.lastrowid-limit))+";")
		log.execute("VACUUM")
	log.commit()
def terminate(*args):
	GPIO.cleanup()
	if log is not None:
		log.close()
	print "\n"
	sys.exit(0)
signal.signal(signal.SIGINT, terminate)
try:
	while int(time.time()) < 1435104823: # Wait for clock to work
		copyTubes(0)
		time.sleep(delay)
	subprocess.call(["/usr/bin/php", "/usr/local/bin/sun-set+rise"])
	while not os.path.isfile("/var/www/html/config.json"): # Wait for device to be set
		copyTubes(0)
		time.sleep(delay)
	if os.path.isfile(err):
		os.unlink(err)
	temp=None
	while True:
		cfg=config2C(readJSON("config.json"))
		sun=readJSON("tmp/sun.json")
		offset=getOffset(sun,cfg)
		temp=getTemp(temp)
		target=getTarget(cfg,offset,temp)
		lpCt=0
		while temp is False: # Sensor is missing
			temp = copyTubes(0)
			time.sleep(delay)
		if cfg["trigger"] > 0: # Cooling
			GPIO.output(relayB, 0) # Only used for heating
			if target <= temp and cfg["enabled"] == 1:
				GPIO.output(relayA, 1) # Cool
				appendLog(1)
				while temp >= cfg["target"]+offset and cfg["enabled"] == 1: # Keep cooling
					time.sleep(delay)
					cfg=config2C(readJSON("config.json"))
					if cfg["trigger"] <= 0:
						break
					sun=readJSON("tmp/sun.json")
					offset=getOffset(sun,cfg)
					temp=getTemp(temp)
					getTarget(cfg,offset,temp) # Only to keep LCD upto date
					lpCt=lpCt+1
					if lpCt == logInt:
						lpCt=0
						appendLog(1)
				GPIO.output(relayA, 0) # Stop cooling
				appendLog(1)
			else:
				GPIO.output(relayA, 0) # Do not cool
		elif cfg["trigger"] < 0 : # Heating
			if target >= temp and cfg["enabled"] == 1:
				GPIO.output(relayA, 0) # Heat
				appendLog(2)
#				startTemp=temp
#				started=False
				cycled=0 # used under heating, but we are storing this value
				Otemp=0
				while temp <= cfg["target"]+offset and cfg["enabled"] == 1: # Keep heating
#					if not started and temp-500 < startTemp: # If temp drop after start (drop of 0.5C/0.9F)
#						GPIO.output(relayB, 1) # Need more heat
#						while temp < startTemp+250 and temp <= cfg["target"]+offset: # wait till back where we started (gain of 0.25C/0.45F)
#							time.sleep(delay)
#							temp=getTemp(temp)
#							started=config2C(readJSON("config.json"))
#							if started != cfg: # Exit task on new settings
#								cfg=started
#								break
#						GPIO.output(relayB, 0) # Heat slower
#						started=True # Don't do this again this heating cycle
					aux=target+cfg["auxon"]
					if cycled == 1 and temp <= Otemp-260: # Aux shut off and temp fell 0.26C (~0.5F) while the heat was running, better turn it on and keep it on
						cycled=2
					if (temp <= aux or cycled == 2 ) and cfg["auxenabled"] == 1:
						if GPIO.input(relayB) == 0:
							GPIO.output(relayB, 1) # Need more heat
							appendLog(2)
#							print "More heat - "+str(temp)
					elif temp >= aux+cfg["auxoff"] or cfg["auxenabled"] == 0:
						if GPIO.input(relayB) == 1:
							Otemp=temp
							cycled=cycled+1
							GPIO.output(relayB, 0) # Heat slower
							appendLog(2)
#							print "AUX off - "+str(temp)
					if cycled == 1 and temp > Otemp: # Lets not waits the heat we just got via Aux
						Otemp=temp
					time.sleep(delay)
					cfg=config2C(readJSON("config.json"))
					if cfg["trigger"] >= 0:
						break
					sun=readJSON("tmp/sun.json")
					offset=getOffset(sun,cfg)
					temp=getTemp(temp,cycled)
					target=getTarget(cfg,offset,temp)
					lpCt=lpCt+1
					if lpCt == logInt:
						lpCt=0
						appendLog(2)
				GPIO.output(relayB, 0) # Stop Heating
				GPIO.output(relayA, 1) # Stop Heating
				appendLog(2)
			else: # Do not heat
				GPIO.output(relayA, 1)
				GPIO.output(relayB, 0)
		else:
			copyTubes(1)
		time.sleep(delay)
except KeyboardInterrupt:
	terminate()
except BaseException, e: # Something went wrong
	exc_type, exc_value, exc_traceback = sys.exc_info()
	with open(err, 'w+') as f:
		f.write(str(exc_value))
	try:
		while True:
			copyTubes(0)
			time.sleep(delay)
	except KeyboardInterrupt:
		terminate()
	except BaseException, e: # Something went very wrong
		exc_type, exc_value, exc_traceback = sys.exc_info()
		with open(err, 'a') as f:
			f.write(str(exc_value))
#terminate()
